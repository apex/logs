// Do not edit, this file was generated by github.com/apex/rpc.

// Alert represents configuration for performing alerting.
interface Alert {
  // created_at is a timestamp indicating when the alert was created. This field is read-only.
  created_at?: Date

  // description is the description of the alert.
  description?: string

  // id is the alert id. This field is read-only.
  id?: string

  // interval is the interval in minutes for performing the alert.
  interval?: number

  // limit is the maximum number of events in the alert notification.
  limit?: number

  // muted is a boolean used ignore trigger and resolve notifications.
  muted?: boolean

  // name is the name of the alert. This field is required.
  name: string

  // notification_id is the notification id for reporting alerts, when omitted the alert will not run. This field is required.
  notification_id: string

  // operator is the operator used when comparing against the threshold. This field is required. Must be one of: ">", ">=", "<", "<=".
  operator: string

  // project_id is the associated project id. This field is required.
  project_id: string

  // query is the query performed by the alert. This field is required.
  query: string

  // severity is the severity of the alert. This field is required. Must be one of: "info", "notice", "error", "critical".
  severity: string

  // threshold is the threshold for comparison against the selected operator.
  threshold?: number

  // updated_at is a timestamp indicating when the alert was last updated. This field is read-only.
  updated_at?: Date
}

// BooleanFieldStat represents a boolean field's stats.
interface BooleanFieldStat {
  // count is the number of times this field occurred in the sampled events.
  count?: number

  // percent is the percentage of occurrences in the sampled events.
  percent?: number

  // value is the boolean value.
  value?: boolean
}

// DiscoveredField represents a single discovered field.
interface DiscoveredField {
  // count is the number of times this field occurred in the sampled events.
  count?: number

  // name is the field name.
  name?: string

  // percent is the percentage of occurrences in the sampled events.
  percent?: number

  // type is the type of discovered field. Must be one of: "string", "number", "boolean".
  type?: string
}

// Event represents a single log event.
interface Event {
  // fields is the log fields.
  fields?: object

  // id is the event id.
  id?: string

  // level is the severity level. This field is required. Must be one of: "debug", "info", "notice", "warning", "error", "critical", "alert", "emergency".
  level: string

  // message is the log message. This field is required.
  message: string

  // timestamp is the creation timestamp.
  timestamp?: Date
}

// InstanceConfig represents an instance's configuration.
interface InstanceConfig {
  // project_id is the Google Cloud project id.
  project_id?: string

  // region is the Google Cloud region id.
  region?: string

  // team_id is the Apex team id.
  team_id?: string
}

// Notification represents an alert notification.
interface Notification {
  // created_at is a timestamp indicating when the notification was created. This field is read-only.
  created_at?: Date

  // email_addresses is the receipients of the alert notifications.
  email_addresses?: string[]

  // id is the notification id. This field is read-only.
  id?: string

  // name is the name of the notification. This field is required.
  name: string

  // pagerduty_service_key is the PagerDuty service key.
  pagerduty_service_key?: string

  // project_id is the associated project id. This field is required.
  project_id: string

  // slack_channel is the Slack channel name, otherwise the default for the webhook is used.
  slack_channel?: string

  // slack_webhook_url is the Slack webhook URL.
  slack_webhook_url?: string

  // sms_numbers is the receipients of the alert notifications.
  sms_numbers?: string[]

  // type is the type of notification. This field is required. Must be one of: "slack", "pagerduty", "email", "sms", "webhook".
  type: string

  // updated_at is a timestamp indicating when the notification was last updated. This field is read-only.
  updated_at?: Date

  // webhook_url is the webhook URL which receives the alert payloads.
  webhook_url?: string
}

// Project represents a customer application.
interface Project {
  // created_at is a timestamp indicating when the project was created. This field is read-only.
  created_at?: Date

  // description is the project description.
  description?: string

  // id is the project id. This field is read-only.
  id?: string

  // location is the geographical location where the log events are stored. This field is required. Must be one of: "us-west2", "northamerica-northeast1", "us-east4", "southamerica-east1", "europe-north1", "europe-west2", "europe-west6", "asia-east2", "asia-south1", "asia-northeast2", "asia-east1", "asia-northeast1", "asia-southeast1", "australia-southeast1".
  location: string

  // name is the human-friendly project name. This field is required.
  name: string

  // retention is the retention of log events in days. When zero the logs do not expire.
  retention?: number

  // updated_at is a timestamp indicating when the project was last updated. This field is read-only.
  updated_at?: Date
}

// QueryStats represents query statistics.
interface QueryStats {
  // cache_hit is a boolean indicating if the query was cached.
  cache_hit?: boolean

  // duration is the query duration in milliseconds.
  duration?: number

  // total_bytes_billed is the total number of bytes billed by the query.
  total_bytes_billed?: number

  // total_bytes_processed is the total number of bytes processed by the query.
  total_bytes_processed?: number
}

// Search represents a saved search query.
interface Search {
  // created_at is a timestamp indicating when the saved search was created. This field is read-only.
  created_at?: Date

  // id is the saved search id. This field is read-only.
  id?: string

  // name is the name of the saved search. This field is required.
  name: string

  // project_id is the associated project id. This field is required.
  project_id: string

  // query is the saved search query. This field is required.
  query: string

  // updated_at is a timestamp indicating when the saved search was last updated. This field is read-only.
  updated_at?: Date
}

// StringFieldStat represents a string field's stats.
interface StringFieldStat {
  // count is the number of times this field occurred in the sampled events.
  count?: number

  // percent is the percentage of occurrences in the sampled events.
  percent?: number

  // value is the string value.
  value?: string
}

// TimeseriesPoint represents a single point in a timeseries query.
interface TimeseriesPoint {
  // count is the number of events for this bucket.
  count?: number

  // timestamp is the bucket timestamp.
  timestamp?: Date
}

// Token represents an API token.
interface Token {
  // created_at is a timestamp indicating when the token was created. This field is read-only.
  created_at?: Date

  // description is the description of the token.
  description?: string

  // id is the token. This field is read-only.
  id?: string

  // last_used_at is a timestamp indicating when the token was last used. This field is read-only.
  last_used_at?: Date

  // scopes is available to this token, permitting access to read and write data. This field is required. Must be one of: "events:read", "events:write", "alerts:read", "alerts:write", "notifications:read", "notifications:write", "projects:read", "projects:write", "tokens:read", "tokens:write", "searches:read", "searches:write".
  scopes: string[]
}

// AddAlertInput params.
interface AddAlertInput {
  // alert is the alert. This field is required.
  alert: Alert
}

// AddAlertOutput params.
interface AddAlertOutput {
  // id is the alert id. This field is required.
  id: string
}

// AddEventsInput params.
interface AddEventsInput {
  // events is the batch of events. This field is required.
  events: Event[]

  // project_id is the project id. This field is required.
  project_id: string
}

// AddNotificationInput params.
interface AddNotificationInput {
  // notification is the notification. This field is required.
  notification: Notification
}

// AddNotificationOutput params.
interface AddNotificationOutput {
  // id is the notification id. This field is required.
  id: string
}

// AddProjectInput params.
interface AddProjectInput {
  // project is the project. This field is required.
  project: Project
}

// AddProjectOutput params.
interface AddProjectOutput {
  // id is the project id. This field is required.
  id: string
}

// AddSearchInput params.
interface AddSearchInput {
  // search is the saved search. This field is required.
  search: Search
}

// AddSearchOutput params.
interface AddSearchOutput {
  // id is the saved search id. This field is required.
  id: string
}

// AddTokenInput params.
interface AddTokenInput {
  // token is the token. This field is required.
  token: Token
}

// AddTokenOutput params.
interface AddTokenOutput {
  // id is the token id.
  id?: string
}

// GetAlertInput params.
interface GetAlertInput {
  // alert_id is the alert id. This field is required.
  alert_id: string

  // project_id is the project id. This field is required.
  project_id: string
}

// GetAlertOutput params.
interface GetAlertOutput {
  // alert is the alert. This field is required.
  alert: Alert
}

// GetAlertsInput params.
interface GetAlertsInput {
  // project_id is the project id. This field is required.
  project_id: string
}

// GetAlertsOutput params.
interface GetAlertsOutput {
  // alerts is the alerts. This field is required.
  alerts: Alert[]
}

// GetBooleanFieldStatsInput params.
interface GetBooleanFieldStatsInput {
  // field is the field name. This field is required.
  field: string

  // project_id is the project id. This field is required.
  project_id: string

  // query is the search query string.
  query?: string

  // start is the start timestamp, events before this time are not included. This field is required.
  start: Date

  // stop is the stop timestamp, events after this time are not included. This field is required.
  stop: Date
}

// GetBooleanFieldStatsOutput params.
interface GetBooleanFieldStatsOutput {
  // stats is the query statistics. This field is required.
  stats: QueryStats

  // values is the boolean values. This field is required.
  values: BooleanFieldStat[]
}

// GetCountInput params.
interface GetCountInput {
  // project_id is the project id. This field is required.
  project_id: string

  // query is the search query string.
  query?: string

  // start is the start timestamp, events before this time are not included. This field is required.
  start: Date

  // stop is the stop timestamp, events after this time are not included. This field is required.
  stop: Date
}

// GetCountOutput params.
interface GetCountOutput {
  // count is the query result count. This field is required.
  count: number

  // stats is the query statistics. This field is required.
  stats: QueryStats
}

// GetDiscoveredFieldsInput params.
interface GetDiscoveredFieldsInput {
  // project_id is the project id. This field is required.
  project_id: string

  // query is the search query string.
  query?: string

  // start is the start timestamp, events before this time are not included. This field is required.
  start: Date

  // stop is the stop timestamp, events after this time are not included. This field is required.
  stop: Date
}

// GetDiscoveredFieldsOutput params.
interface GetDiscoveredFieldsOutput {
  // fields is the fields discovered. This field is required.
  fields: DiscoveredField[]

  // stats is the query statistics. This field is required.
  stats: QueryStats
}

// GetInstanceConfigOutput params.
interface GetInstanceConfigOutput {
  // config is the instance configuration.
  config?: InstanceConfig
}

// GetNotificationInput params.
interface GetNotificationInput {
  // notification_id is the notification id. This field is required.
  notification_id: string

  // project_id is the project id. This field is required.
  project_id: string
}

// GetNotificationOutput params.
interface GetNotificationOutput {
  // notification is the notification. This field is required.
  notification: Notification
}

// GetNotificationsInput params.
interface GetNotificationsInput {
  // project_id is the project id. This field is required.
  project_id: string
}

// GetNotificationsOutput params.
interface GetNotificationsOutput {
  // notifications is the notifications. This field is required.
  notifications: Notification[]
}

// GetNumericFieldStatsInput params.
interface GetNumericFieldStatsInput {
  // field is the field name. This field is required.
  field: string

  // project_id is the project id. This field is required.
  project_id: string

  // query is the search query string.
  query?: string

  // start is the start timestamp, events before this time are not included. This field is required.
  start: Date

  // stop is the stop timestamp, events after this time are not included. This field is required.
  stop: Date
}

// GetNumericFieldStatsOutput params.
interface GetNumericFieldStatsOutput {
  // avg is the avg value. This field is required.
  avg: number

  // max is The max value. This field is required.
  max: number

  // min is the min value. This field is required.
  min: number

  // stats is the query statistics. This field is required.
  stats: QueryStats
}

// GetProjectStatsInput params.
interface GetProjectStatsInput {
  // project_id is the project id. This field is required.
  project_id: string
}

// GetProjectStatsOutput params.
interface GetProjectStatsOutput {
  // bytes_total is the total number of bytes stored. This field is required.
  bytes_total: number

  // events_total is the total number of events stored. This field is required.
  events_total: number
}

// GetProjectsOutput params.
interface GetProjectsOutput {
  // projects is the projects. This field is required.
  projects: Project[]
}

// GetSearchesInput params.
interface GetSearchesInput {
  // project_id is the project id. This field is required.
  project_id: string
}

// GetSearchesOutput params.
interface GetSearchesOutput {
  // searches is the saved searches.
  searches?: Search[]
}

// GetStringFieldStatsInput params.
interface GetStringFieldStatsInput {
  // field is the field name. This field is required.
  field: string

  // limit is the maximum number of values to return.
  limit?: number

  // project_id is the project id. This field is required.
  project_id: string

  // query is the search query string.
  query?: string

  // start is the start timestamp, events before this time are not included. This field is required.
  start: Date

  // stop is the stop timestamp, events after this time are not included. This field is required.
  stop: Date
}

// GetStringFieldStatsOutput params.
interface GetStringFieldStatsOutput {
  // stats is the query statistics. This field is required.
  stats: QueryStats

  // values is the string values. This field is required.
  values: StringFieldStat[]
}

// GetTimeseriesInput params.
interface GetTimeseriesInput {
  // max_points is the maxmimum number of datapoints to return. This field is required.
  max_points: number

  // project_id is the project id. This field is required.
  project_id: string

  // query is the search query string.
  query?: string

  // start is the start timestamp, events before this time are not included. This field is required.
  start: Date

  // stop is the stop timestamp, events after this time are not included. This field is required.
  stop: Date
}

// GetTimeseriesOutput params.
interface GetTimeseriesOutput {
  // points is the series. This field is required.
  points: TimeseriesPoint[]

  // stats is the query statistics. This field is required.
  stats: QueryStats
}

// GetTokensOutput params.
interface GetTokensOutput {
  // tokens is the tokens.
  tokens?: Token[]
}

// QueryInput params.
interface QueryInput {
  // project_id is the project id. This field is required.
  project_id: string

  // query is the SQL query string. This field is required.
  query: string
}

// QueryOutput params.
interface QueryOutput {
  // results is the query results. This field is required.
  results: object[]

  // stats is the query statistics. This field is required.
  stats: QueryStats
}

// RemoveAlertInput params.
interface RemoveAlertInput {
  // alert_id is the alert id. This field is required.
  alert_id: string

  // project_id is the project id. This field is required.
  project_id: string
}

// RemoveNotificationInput params.
interface RemoveNotificationInput {
  // notification_id is the notification id. This field is required.
  notification_id: string

  // project_id is the project id. This field is required.
  project_id: string
}

// RemoveProjectInput params.
interface RemoveProjectInput {
  // project_id is the project id. This field is required.
  project_id: string
}

// RemoveSearchInput params.
interface RemoveSearchInput {
  // project_id is the project id. This field is required.
  project_id: string

  // search_id is the saved search id. This field is required.
  search_id: string
}

// RemoveTokenInput params.
interface RemoveTokenInput {
  // token_id is the token id. This field is required.
  token_id: string
}

// SearchInput params.
interface SearchInput {
  // limit is the maxmimum number of events to return.
  limit?: number

  // order is the query timestamp sort order. Must be one of: "ascending", "descending".
  order?: string

  // project_id is the project id. This field is required.
  project_id: string

  // query is the search query string.
  query?: string

  // start is the start timestamp, events before this time are not included. This field is required.
  start: Date

  // stop is the stop timestamp, events after this time are not included. This field is required.
  stop: Date
}

// SearchOutput params.
interface SearchOutput {
  // events is the query search results. This field is required.
  events: Event[]

  // stats is the query statistics. This field is required.
  stats: QueryStats
}

// TestAlertInput params.
interface TestAlertInput {
  // alert is the alert. This field is required.
  alert: Alert
}

// UpdateAlertInput params.
interface UpdateAlertInput {
  // alert is the alert. This field is required.
  alert: Alert
}

// UpdateNotificationInput params.
interface UpdateNotificationInput {
  // notification is the notification. This field is required.
  notification: Notification
}

// UpdateProjectInput params.
interface UpdateProjectInput {
  // project is the project. This field is required.
  project: Project
}

// UpdateSearchInput params.
interface UpdateSearchInput {
  // search is the saved search. This field is required.
  search: Search
}


// fetch for Node
const fetch = (typeof window == 'undefined' || window.fetch == null)
// @ts-ignore
  ? require('node-fetch')
  : window.fetch

/**
 * ClientError is an API client error providing the HTTP status code and error type.
 */

class ClientError extends Error {
  status: number;
  type?: string;

  constructor(status: number, message?: string, type?: string) {
    super(message)
    this.status = status
    this.type = type
  }
}

/**
 * Call method with params via a POST request.
 */

async function call(url: string, method: string, authToken?: string, params?: any): Promise<string> {
  const headers: Record<string, string> = {
    'Content-Type': 'application/json'
  }
  
  if (authToken != null) {
    headers['Authorization'] = `Bearer ${authToken}`
  }
  
  const res = await fetch(url + '/' + method, {
    method: 'POST',
    body: JSON.stringify(params),
    headers
  })

  // we have an error, try to parse a well-formed json
  // error response, otherwise default to status code
  if (res.status >= 300) {
    let err
    try {
      const { type, message } = await res.json()
      err = new ClientError(res.status, message, type)
    } catch {
      err = new ClientError(res.status, res.statusText)
    }
    throw err
  }

  return res.text()
}


const reISO8601 = /(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/

/**
 * Client is the API client.
 */

export class Client {

  private url: string
  private authToken?: string

  /**
   * Initialize.
   */

  constructor(params: { url: string, authToken?: string }) {
    this.url = params.url
    this.authToken = params.authToken
  }

  /**
   * Decoder is used as the reviver parameter when decoding responses.
   */

  private decoder(key: any, value: any) {
    return typeof value == 'string' && reISO8601.test(value)
      ? new Date(value)
      : value
  }

  /**
   * addAlert: creates a new alert.
   */

  async addAlert(params: AddAlertInput): Promise<AddAlertOutput> {
    let res = await call(this.url, 'add_alert', this.authToken, params)
    let out: AddAlertOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * addEvents: ingests a batch of events.
   */

  async addEvents(params: AddEventsInput) {
    await call(this.url, 'add_events', this.authToken, params)
  }

  /**
   * addNotification: creates a new notification.
   */

  async addNotification(params: AddNotificationInput): Promise<AddNotificationOutput> {
    let res = await call(this.url, 'add_notification', this.authToken, params)
    let out: AddNotificationOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * addProject: creates a new project.
   */

  async addProject(params: AddProjectInput): Promise<AddProjectOutput> {
    let res = await call(this.url, 'add_project', this.authToken, params)
    let out: AddProjectOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * addSearch: creates a new saved search.
   */

  async addSearch(params: AddSearchInput): Promise<AddSearchOutput> {
    let res = await call(this.url, 'add_search', this.authToken, params)
    let out: AddSearchOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * addToken: creates a new token.
   */

  async addToken(params: AddTokenInput): Promise<AddTokenOutput> {
    let res = await call(this.url, 'add_token', this.authToken, params)
    let out: AddTokenOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getAlert: returns an alert.
   */

  async getAlert(params: GetAlertInput): Promise<GetAlertOutput> {
    let res = await call(this.url, 'get_alert', this.authToken, params)
    let out: GetAlertOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getAlerts: returns all alerts in a project.
   */

  async getAlerts(params: GetAlertsInput): Promise<GetAlertsOutput> {
    let res = await call(this.url, 'get_alerts', this.authToken, params)
    let out: GetAlertsOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getBooleanFieldStats: returns field statistics for a boolean field.
   */

  async getBooleanFieldStats(params: GetBooleanFieldStatsInput): Promise<GetBooleanFieldStatsOutput> {
    let res = await call(this.url, 'get_boolean_field_stats', this.authToken, params)
    let out: GetBooleanFieldStatsOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getCount: performs a search query against the log events, returning the number of matches.
   */

  async getCount(params: GetCountInput): Promise<GetCountOutput> {
    let res = await call(this.url, 'get_count', this.authToken, params)
    let out: GetCountOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getDiscoveredFields: returns fields discovered in the provided time range.
   */

  async getDiscoveredFields(params: GetDiscoveredFieldsInput): Promise<GetDiscoveredFieldsOutput> {
    let res = await call(this.url, 'get_discovered_fields', this.authToken, params)
    let out: GetDiscoveredFieldsOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getInstanceConfig: returns instance configuration.
   */

  async getInstanceConfig(): Promise<GetInstanceConfigOutput> {
    let res = await call(this.url, 'get_instance_config', this.authToken)
    let out: GetInstanceConfigOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getNotification: returns a notification.
   */

  async getNotification(params: GetNotificationInput): Promise<GetNotificationOutput> {
    let res = await call(this.url, 'get_notification', this.authToken, params)
    let out: GetNotificationOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getNotifications: returns all notifications.
   */

  async getNotifications(params: GetNotificationsInput): Promise<GetNotificationsOutput> {
    let res = await call(this.url, 'get_notifications', this.authToken, params)
    let out: GetNotificationsOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getNumericFieldStats: returns field statistics for a numeric field.
   */

  async getNumericFieldStats(params: GetNumericFieldStatsInput): Promise<GetNumericFieldStatsOutput> {
    let res = await call(this.url, 'get_numeric_field_stats', this.authToken, params)
    let out: GetNumericFieldStatsOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getProjectStats: returns project statistics.
   */

  async getProjectStats(params: GetProjectStatsInput): Promise<GetProjectStatsOutput> {
    let res = await call(this.url, 'get_project_stats', this.authToken, params)
    let out: GetProjectStatsOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getProjects: returns all projects.
   */

  async getProjects(): Promise<GetProjectsOutput> {
    let res = await call(this.url, 'get_projects', this.authToken)
    let out: GetProjectsOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getSearches: returns all saved searches in a project.
   */

  async getSearches(params: GetSearchesInput): Promise<GetSearchesOutput> {
    let res = await call(this.url, 'get_searches', this.authToken, params)
    let out: GetSearchesOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getStringFieldStats: returns field statistics for a string field.
   */

  async getStringFieldStats(params: GetStringFieldStatsInput): Promise<GetStringFieldStatsOutput> {
    let res = await call(this.url, 'get_string_field_stats', this.authToken, params)
    let out: GetStringFieldStatsOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getTimeseries: returns a timeseries of event counts in the provided time range.
   */

  async getTimeseries(params: GetTimeseriesInput): Promise<GetTimeseriesOutput> {
    let res = await call(this.url, 'get_timeseries', this.authToken, params)
    let out: GetTimeseriesOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * getTokens: returns all tokens.
   */

  async getTokens(): Promise<GetTokensOutput> {
    let res = await call(this.url, 'get_tokens', this.authToken)
    let out: GetTokensOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * query: performs a SQL query against the log events.
   */

  async query(params: QueryInput): Promise<QueryOutput> {
    let res = await call(this.url, 'query', this.authToken, params)
    let out: QueryOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * removeAlert: removes an alert.
   */

  async removeAlert(params: RemoveAlertInput) {
    await call(this.url, 'remove_alert', this.authToken, params)
  }

  /**
   * removeNotification: removes a notification.
   */

  async removeNotification(params: RemoveNotificationInput) {
    await call(this.url, 'remove_notification', this.authToken, params)
  }

  /**
   * removeProject: removes a project.
   */

  async removeProject(params: RemoveProjectInput) {
    await call(this.url, 'remove_project', this.authToken, params)
  }

  /**
   * removeSearch: removes a saved search.
   */

  async removeSearch(params: RemoveSearchInput) {
    await call(this.url, 'remove_search', this.authToken, params)
  }

  /**
   * removeToken: removes a token.
   */

  async removeToken(params: RemoveTokenInput) {
    await call(this.url, 'remove_token', this.authToken, params)
  }

  /**
   * search: performs a search query against the log events.
   */

  async search(params: SearchInput): Promise<SearchOutput> {
    let res = await call(this.url, 'search', this.authToken, params)
    let out: SearchOutput = JSON.parse(res, this.decoder)
    return out
  }

  /**
   * testAlert: test the alert configuration.
   */

  async testAlert(params: TestAlertInput) {
    await call(this.url, 'test_alert', this.authToken, params)
  }

  /**
   * updateAlert: updates an alert.
   */

  async updateAlert(params: UpdateAlertInput) {
    await call(this.url, 'update_alert', this.authToken, params)
  }

  /**
   * updateNotification: updates a notification.
   */

  async updateNotification(params: UpdateNotificationInput) {
    await call(this.url, 'update_notification', this.authToken, params)
  }

  /**
   * updateProject: updates a project.
   */

  async updateProject(params: UpdateProjectInput) {
    await call(this.url, 'update_project', this.authToken, params)
  }

  /**
   * updateSearch: updates a saved search.
   */

  async updateSearch(params: UpdateSearchInput) {
    await call(this.url, 'update_search', this.authToken, params)
  }

}
